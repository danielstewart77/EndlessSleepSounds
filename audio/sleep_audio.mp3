import logging
from ask_sdk_core.skill_builder import SkillBuilder
from ask_sdk_core.dispatch_components import AbstractRequestHandler, AbstractExceptionHandler
from ask_sdk_core.handler_input import HandlerInput
from ask_sdk_model import Response
from ask_sdk_model.ui import PlayBehavior, AudioItem, Stream, AudioItemMetadata

# Setup logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Skill Builder object
sb = SkillBuilder()

class LaunchRequestHandler(AbstractRequestHandler):
    '''Handler for Skill Launch.'''
    def can_handle(self, handler_input):
        return handler_input.request_envelope.request.object_type == 'LaunchRequest'

    def handle(self, handler_input):
        speak_output = 'Welcome to Sleep Sound. I will play relaxing sounds all night for you.'
        return (
            handler_input.response_builder
                .speak(speak_output)
                .add_directive(self.get_play_directive())
                .response
        )

    def get_play_directive(self):
        '''Return the directive to play the audio stream in a loop.'''
        return {
            'type': 'AudioPlayer.Play',
            'playBehavior': 'REPLACE_ALL',
            'audioItem': {
                'stream': {
                    'token': 'loopAudio',
                    'url': 'https://your-audio-file-url/sleep_audio.mp3',
                    'offsetInMilliseconds': 0,
                    'expectedPreviousToken': None
                },
                'metadata': {}
            }
        }

class ExceptionHandler(AbstractExceptionHandler):
    '''Exception handler to capture any errors in skill execution.'''
    def can_handle(self, handler_input, exception):
        return True

    def handle(self, handler_input, exception):
        logger.error(exception, exc_info=True)
        return handler_input.response_builder.speak("Sorry, there was an error. Please try again.").response

sb.add_request_handler(LaunchRequestHandler())
sb.add_exception_handler(ExceptionHandler())

lambda_handler = sb.lambda_handler()
